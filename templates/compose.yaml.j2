#jinja2: trim_blocks: True, lstrip_blocks: True
services:
  mysql:
    image: bitnami/mysql:8.0
    hostname: mysql.orb.local
    container_name: mysql
    networks:
      - hadoop_net
    environment:
      - MYSQL_ROOT_PASSWORD=root
      - MYSQL_AUTHENTICATION_PLUGIN=mysql_native_password
      - MYSQL_DATABASE=metastore
    volumes:
    - ./mysql/files/docker-entrypoint-initdb.d:/docker-entrypoint-initdb.d
    ports:
      - 3306:3306

  socks5:
    image: serjs/go-socks5-proxy
    hostname: socks5.orb.local
    container_name: socks5
    networks:
      - hadoop_net
    environment:
      - PROXY_PORT=18070
    ports:
      - 18070:18070

  hadoop-master1:
    image: hadoop-testing/hadoop-master1:${PROJECT_VERSION}
    hostname: hadoop-master1.orb.local
    container_name: hadoop-master1
    networks:
      - hadoop_net
    volumes:
      - share:/share
    ports:
      - 8020:8020
      - 9083:9083
      - 8088:8088
      - 9870:9870
      - 10009:10009
      - 10099:10099
      - 18080:18080
      - 19888:19888
      - 6080:6080
    depends_on:
      - mysql

  hadoop-worker1:
    image: hadoop-testing/hadoop-worker1:${PROJECT_VERSION}
    hostname: hadoop-worker1.orb.local
    container_name: hadoop-worker1
    networks:
      - hadoop_net
    privileged: true
    volumes:
      - share:/share
    depends_on:
      - hadoop-master1

  hadoop-worker2:
    image: hadoop-testing/hadoop-worker2:${PROJECT_VERSION}
    hostname: hadoop-worker2.orb.local
    container_name: hadoop-worker2
    networks:
      - hadoop_net
    privileged: true
    volumes:
      - share:/share
    depends_on:
      - hadoop-master1

  hadoop-worker3:
    image: hadoop-testing/hadoop-worker3:${PROJECT_VERSION}
    hostname: hadoop-worker3.orb.local
    container_name: hadoop-worker3
    networks:
      - hadoop_net
    privileged: true
    volumes:
      - share:/share
    depends_on:
      - hadoop-master1

{% if kerberos_enabled %}
  kdc:
    image: hadoop-testing/kdc:${PROJECT_VERSION}
    hostname: kdc.orb.local
    container_name: kdc
    networks:
      - hadoop_net
    volumes:
      - share:/share
    ports:
      - 88:88
      - 89:89
{% endif %}

{% if prometheus_enabled %}
  prometheus:
    image: prom/prometheus:v${PROMETHEUS_VERSION}
    hostname: prometheus.orb.local
    container_name: prometheus
    networks:
      - hadoop_net
    volumes:
      - ./files/etc/prometheus:/etc/prometheus
    ports:
      - 9090:9090
{% endif %}

{% if loki_enabled %}
  loki:
    image: grafana/loki:${LOKI_VERSION}
    hostname: loki.orb.local
    container_name: loki
    networks:
      - hadoop_net
    volumes:
      - ./files/etc/loki:/etc/loki
    ports:
      - 3100:3100
    command: -config.file=/etc/loki/config.yaml
{% endif %}

{% if grafana_enabled  %}
  grafana:
    image: grafana/grafana-oss:${GRAFANA_VERSION}
    hostname: grafana.orb.local
    container_name: grafana
    networks:
      - hadoop_net
    environment:
      - GF_PATHS_PROVISIONING=/etc/grafana/provisioning
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
    volumes:
      - ./files/etc/grafana/provisioning:/etc/grafana/provisioning
      - ./files/var/lib/grafana/dashboards:/var/lib/grafana/dashboards
    ports:
      - 3000:3000
{% endif %}

{% if kafka_enabled %}
  kafka:
    image: bitnami/kafka:${KAFKA_VERSION}
    hostname: kafka.orb.local
    container_name: kafka
    networks:
      - hadoop_net
    ports:
      - 9092:9092
    environment:
      - KAFKA_ZOOKEEPER_CONNECT=hadoop-master1.orb.local:2181
      - ALLOW_PLAINTEXT_LISTENER=yes
    depends_on:
      - hadoop-master1
{% endif %}

{% if kafka_enabled and kafka_ui_enabled %}
  kafka-ui:
    image: kafbat/kafka-ui:v${KAFKA_UI_VERSION}
    hostname: kafka-ui.orb.local
    container_name: kafka-ui
    networks:
      - hadoop_net
    ports:
      - 19092:19092
    environment:
      SERVER_PORT: 19092
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka.orb.local:9092
{% endif %}

volumes:
  share:

networks:
  hadoop_net:
    name: orb.local
    driver: bridge